1207. Unique Number of Occurrences
Hint
Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.

 

Example 1:

Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.
Example 2:

Input: arr = [1,2]
Output: false
Example 3:

Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true
 

Constraints:

1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000
--------------------------------------------------------------------------------------------------------
Hint 1:
Think about how you can count how many times each number appears in the array.
-> You can use a map (or unordered_map) to store the count of each integer.

Hint 2:
Once you've counted all the elements, you now need to check if these counts are unique.
-> This means if any two elements have the same frequency, return false.

Hint 3:
To check for uniqueness of the frequencies, you can use a set.
-> A set automatically ignores duplicates, so it can help you track if you've seen the frequency before.

Hint 4:
Loop through the frequency map. For each frequency:
- If it's already in the set, that means it's a duplicate â†’ return false.
- Otherwise, insert the frequency into the set.

Hint 5:
If the loop completes without finding duplicates in frequencies, return true.

Final Code Structure:
1. Use map<int, int> to count occurrences.
2. Use unordered_set<int> to track seen frequencies.
3. Loop through the map and check/insert into the set.
